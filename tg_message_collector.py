#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram.
–ü—Ä–∏–Ω—Ü–∏–ø 80/20: –º–∞–∫—Å–∏–º—É–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –º–∏–Ω–∏–º—É–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
"""

import os
import sys
import json
import time
import asyncio
import logging
import pickle
from datetime import datetime
from dotenv import load_dotenv
from telethon import TelegramClient
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty
from telethon.errors import FloodWaitError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("tg_collector.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_ID = int(os.getenv('API_ID'))
API_HASH = os.getenv('API_HASH')
PHONE = os.getenv('PHONE')
OUTPUT_DIR = os.getenv('OUTPUT_DIR', 'data/messages')

if not all([API_ID, API_HASH, PHONE]):
    logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (API_ID, API_HASH, PHONE)")
    sys.exit(1)

os.makedirs(OUTPUT_DIR, exist_ok=True)

class TelegramMessageCollector:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram."""
    
    def __init__(self, api_id, api_hash, phone, data_dir='data/messages'):
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client_folder = phone.replace('+', '').replace('-', '').replace(' ', '')
        self.data_dir = os.path.join(data_dir, f"client_{client_folder}")
        os.makedirs(self.data_dir, exist_ok=True)
        
        self.client = TelegramClient('anton_vlasov_session', api_id, api_hash)
        self.me = None
        self.all_messages = []
        
        # Checkpoint —Ñ–∞–π–ª
        self.checkpoint_file = os.path.join(self.data_dir, "checkpoint.pkl")
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "chats_processed": 0,
            "messages_collected": 0,
            "start_time": None,
            "end_time": None
        }
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è."""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")
        self.stats["start_time"] = datetime.now()
        
        await self.client.start(phone=self.phone)
        self.me = await self.client.get_me()
        logger.info(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {self.me.first_name} (@{self.me.username})")
        
    def save_checkpoint(self, processed_chat_ids, all_messages):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ checkpoint –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞."""
        try:
            checkpoint_data = {
                'processed_chat_ids': processed_chat_ids,
                'messages': all_messages,
                'timestamp': datetime.now().isoformat(),
                'stats': self.stats
            }
            with open(self.checkpoint_file, 'wb') as f:
                pickle.dump(checkpoint_data, f)
            logger.debug(f"üíæ Checkpoint —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {len(processed_chat_ids)} —á–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è checkpoint: {e}")
    
    def load_checkpoint(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ checkpoint –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."""
        if not os.path.exists(self.checkpoint_file):
            return None, []
            
        try:
            with open(self.checkpoint_file, 'rb') as f:
                data = pickle.load(f)
            
            processed_ids = data.get('processed_chat_ids', [])
            messages = data.get('messages', [])
            saved_stats = data.get('stats', {})
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats.update(saved_stats)
            self.all_messages = messages
            
            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ checkpoint: {len(processed_ids)} —á–∞—Ç–æ–≤, {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return processed_ids, messages
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ checkpoint: {e}")
            return None, []
    
    def cleanup_checkpoint(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ checkpoint –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        try:
            if os.path.exists(self.checkpoint_file):
                os.remove(self.checkpoint_file)
                logger.info("üßπ Checkpoint —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è checkpoint: {e}")
        
    async def collect_messages(self, limit_per_chat=1000, max_chats=None):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π checkpoint.
        
        Args:
            limit_per_chat: –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Ç
            max_chats: –ú–∞–∫—Å–∏–º—É–º —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        logger.info("üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # üîÑ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏–∑ checkpoint
        processed_chat_ids, _ = self.load_checkpoint()
        if processed_chat_ids:
            logger.info(f"‚ö°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å checkpoint: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {len(processed_chat_ids)} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤")
        else:
            processed_chat_ids = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
            dialogs_response = await self.client(GetDialogsRequest(
                offset_date=None,
                offset_id=0,
                offset_peer=InputPeerEmpty(),
                limit=200,
                hash=0
            ))
            
            dialogs = dialogs_response.dialogs
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(dialogs)}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã
            personal_chats = []
            for dialog in dialogs:
                if hasattr(dialog.peer, 'user_id'):
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
                    if dialog.peer.user_id not in processed_chat_ids:
                        personal_chats.append(dialog)
            
            logger.info(f"üë• –õ–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(personal_chats)}")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if max_chats:
                remaining_slots = max_chats - len(processed_chat_ids)
                if remaining_slots > 0:
                    personal_chats = personal_chats[:remaining_slots]
                    logger.info(f"üìä –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ {len(personal_chats)} –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤")
                else:
                    logger.info("‚úÖ –õ–∏–º–∏—Ç —á–∞—Ç–æ–≤ —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
                    personal_chats = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç
            total_to_process = len(personal_chats)
            for i, dialog in enumerate(personal_chats, 1):
                try:
                    await self._process_chat(dialog, limit_per_chat, i, total_to_process)
                    
                    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º checkpoint –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
                    processed_chat_ids.append(dialog.peer.user_id)
                    self.save_checkpoint(processed_chat_ids, self.all_messages)
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                    if i < total_to_process:
                        await asyncio.sleep(2)
                        
                except FloodWaitError as e:
                    logger.warning(f"‚è≥ FloodWait: –∂–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(e.seconds + 1)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {i}: {e}")
                    continue
            
            await self._save_results()
            
            # üßπ –£–¥–∞–ª—è–µ–º checkpoint –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.cleanup_checkpoint()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.info("üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ checkpoint - –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
            raise
            
    async def _process_chat(self, dialog, limit_per_chat, chat_num, total_chats):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = await self.client.get_entity(dialog.peer.user_id)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
            if user.bot:
                logger.info(f"ü§ñ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞: {user.first_name}")
                return
                
            logger.info(f"üì± [{chat_num}/{total_chats}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {user.first_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.client.get_messages(
                dialog.peer.user_id,
                limit=limit_per_chat
            )
            
            if not messages:
                logger.info(f"üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ —Å {user.first_name}")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_messages = []
            for msg in messages:
                if msg.message:  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_data = {
                        "id": msg.id,
                        "date": msg.date.isoformat(),
                        "from_id": msg.from_id.user_id if msg.from_id else None,
                        "from_name": user.first_name if msg.from_id and msg.from_id.user_id == user.id else "–Ø",
                        "text": msg.message,
                        "chat_with": user.first_name,
                        "chat_id": user.id,
                        "is_outgoing": msg.out,
                        "word_count": len(msg.message.split()),
                        "timestamp": int(msg.date.timestamp()),
                        "hour": msg.date.hour,
                        "day_of_week": msg.date.weekday(),
                        "month": msg.date.month
                    }
                    chat_messages.append(message_data)
            
            if chat_messages:
                self.all_messages.extend(chat_messages)
                self.stats["messages_collected"] += len(chat_messages)
                logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(chat_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ —Å {user.first_name}")
            
            self.stats["chats_processed"] += 1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞: {e}")
            
    async def _save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        self.stats["end_time"] = datetime.now()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ
        self.all_messages.sort(key=lambda x: x['timestamp'])
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π timestamp –¥–ª—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        messages_file = os.path.join(self.data_dir, f"all_messages_{timestamp}.json")
        with open(messages_file, 'w', encoding='utf-8') as f:
            json.dump(self.all_messages, f, ensure_ascii=False, indent=2)
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
        metadata = {
            "collection_date": datetime.now().isoformat(),
            "total_messages": len(self.all_messages),
            "chats_processed": self.stats["chats_processed"],
            "collection_duration": str(self.stats["end_time"] - self.stats["start_time"]),
            "phone": self.phone,
            "unique_chats": len(set(msg['chat_id'] for msg in self.all_messages)),
            "date_range": {
                "earliest": min(msg['date'] for msg in self.all_messages) if self.all_messages else None,
                "latest": max(msg['date'] for msg in self.all_messages) if self.all_messages else None
            }
        }
        
        metadata_file = os.path.join(self.data_dir, f"metadata_{timestamp}.json")
        with open(metadata_file, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
        
        # –§–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
        analysis_text = "\n\n".join([
            f"[{msg['from_name']} -> {msg['chat_with']}]: {msg['text']}"
            for msg in self.all_messages
        ])
        
        analysis_file = os.path.join(self.data_dir, f"analysis_text_{timestamp}.txt")
        with open(analysis_file, 'w', encoding='utf-8') as f:
            f.write(analysis_text)
        
        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        logger.info(f"   üìÑ –°–æ–æ–±—â–µ–Ω–∏—è: {messages_file}")
        logger.info(f"   üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata_file}")
        logger.info(f"   üìù –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_file}")
        logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(self.all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {self.stats['chats_processed']} —á–∞—Ç–æ–≤")
        
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram."""
        await self.client.disconnect()
        logger.info("üîê –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import argparse
    
    parser = argparse.ArgumentParser(description="–°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram")
    parser.add_argument("--all-chats", action="store_true", help="–°–æ–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã")
    parser.add_argument("--limit", type=int, default=1000, help="–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Ç")
    parser.add_argument("--max-chats", type=int, default=None, help="–ú–∞–∫—Å–∏–º—É–º —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    args = parser.parse_args()
    
    collector = TelegramMessageCollector(API_ID, API_HASH, PHONE, OUTPUT_DIR)
    
    try:
        await collector.start()
        
        if args.all_chats:
            # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —á–∞—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            await collector.collect_messages(
                limit_per_chat=args.limit,
                max_chats=args.max_chats  # None = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            )
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
            await collector.collect_messages(
                limit_per_chat=args.limit,
                max_chats=args.max_chats or 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            )
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await collector.disconnect()

if __name__ == "__main__":
    asyncio.run(main())