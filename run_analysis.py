#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import asyncio
import argparse
import json
from dotenv import load_dotenv
from pathlib import Path
from chatgpt_analyzer import ChatGPTAnalyzer

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á OpenAI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("OPENAI_API_KEY")
if not API_KEY:
    raise ValueError("API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env")

async def analyze_chat(analyzer, chat_path, limit=1000):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —á–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Ñ–∞–π–ª–æ–º –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
    is_file = os.path.isfile(chat_path)
    is_dir = os.path.isdir(chat_path)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —á–∞—Ç–∞
    if is_file:
        chat_name = os.path.basename(os.path.dirname(chat_path))
    else:
        chat_name = os.path.basename(chat_path)
    
    print(f"\n–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞: {chat_name}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {limit}")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª
        if is_file and chat_path.endswith('.json'):
            try:
                with open(chat_path, 'r', encoding='utf-8') as f:
                    messages = json.load(f)
                    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ {chat_path}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
                return None
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏
        elif is_dir:
            messages = await analyzer.load_messages_from_dir(directory=chat_path)
            if not messages:
                # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª messages.json –Ω–∞–ø—Ä—è–º—É—é
                messages_file = os.path.join(chat_path, "messages.json")
                if os.path.exists(messages_file):
                    try:
                        with open(messages_file, 'r', encoding='utf-8') as f:
                            messages = json.load(f)
                            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ {messages_file}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
                        return None
                else:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª messages.json –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {chat_path}")
                    return None
        else:
            print(f"–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {chat_path}")
            return None
        
        if not messages:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return None
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        prepared_messages = analyzer.prepare_messages_for_analysis(messages, sample_size=limit)
        if not prepared_messages:
            print("–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return None
            
        # üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó –¢–ï–ú (–≠–¢–ê–ü 1)
        try:
            print("üöÄ –≠–¢–ê–ü 1: –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º...")
            topics_result = await analyzer.analyze_topics_fast(prepared_messages)
        except Exception as e:
            import traceback
            print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–º: {str(e)}")
            print("\n–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
            print(traceback.format_exc())
            return None
        
        if not topics_result or not topics_result.get('topics'):
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º.")
            return None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º
        topics_file = analyzer.save_results_to_json(topics_result, f"{chat_name}_fast_topics_analysis")
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {topics_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–º
        print("\n" + "="*70)
        print("üéØ –ü–†–ï–í–¨–Æ –ù–ê–ô–î–ï–ù–ù–´–• –¢–ï–ú:")
        print("="*70)
        
        topics_data = topics_result.get('topics', [])
        if topics_data:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(topics_data)} —Ç–µ–º:")
            for i, topic in enumerate(topics_data[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 5
                name = topic.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞')
                percentage = topic.get('percentage', 0)
                sentiment = topic.get('sentiment', 'neutral')
                sentiment_emoji = {"positive": "üòä", "negative": "üòî", "neutral": "üòê"}.get(sentiment, "üòê")
                print(f"{i}. {sentiment_emoji} {name} ({percentage:.1f}%)")
        
        print(f"\nüéØ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ {chat_name} –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(topics_data)} —Ç–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        print("\nüí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–µ–π:")
        print("   1. –°–æ–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π Soul Analysis")
        
        return topics_result
    
    except Exception as e:
        import traceback
        print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Ç–∞ {chat_name}: {str(e)}")
        print("\n–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        print(traceback.format_exc())
        return None

async def main():
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑ Telegram-—á–∞—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ChatGPT")
    parser.add_argument(
        "chat_path", 
        nargs="?", 
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É JSON —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–∞—Ç–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"
    )
    parser.add_argument(
        "--limit", 
        type=int, 
        default=1000, 
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000)"
    )
    parser.add_argument(
        "--list", 
        action="store_true", 
        help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    parser.add_argument(
        "--all", 
        action="store_true", 
        help="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —á–∞—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    )
    parser.add_argument(
        "--min-messages", 
        type=int, 
        default=200, 
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 200)"
    )
    parser.add_argument(
        "--max-messages", 
        type=int, 
        default=1500, 
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1500)"
    )
    
    args = parser.parse_args()
    
    # üöÄ –°–ø–∏—Å–æ–∫ API –∫–ª—é—á–µ–π –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_keys = []
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å OPENAI_API_KEY1, OPENAI_API_KEY2, etc.
    for i in range(1, 6):  # OPENAI_API_KEY1 –¥–æ OPENAI_API_KEY5
        key = os.getenv(f'OPENAI_API_KEY{i}')
        if key:
            api_keys.append(key)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º API_KEY_1, API_KEY_2, etc.
    if not api_keys:
        for i in range(1, 6):  # API_KEY_1 –¥–æ API_KEY_5
            key = os.getenv(f'API_KEY_{i}')
            if key:
                api_keys.append(key)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π
    if not api_keys:
        main_key = os.getenv('OPENAI_API_KEY')
        if main_key:
            api_keys = [main_key]
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ OpenAI!")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY1, OPENAI_API_KEY2, ... –∏–ª–∏ OPENAI_API_KEY")
            return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏
    analyzer = ChatGPTAnalyzer(api_keys=api_keys)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–∞—Ö
    available_chats = []
    messages_dir = Path(analyzer.messages_dir)
    
    # –ò—â–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
    for item in messages_dir.rglob("*.json"):
        if item.name.startswith("all_messages_"):
            # –§–∞–π–ª –≤ –Ω–æ–≤–æ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            try:
                with open(item, 'r', encoding='utf-8') as f:
                    messages = json.load(f)
                    msg_count = len(messages)
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø—É—Ç–∏
                    client_name = item.parent.name
                    available_chats.append({
                        "path": str(item.parent),
                        "name": f"–ö–ª–∏–µ–Ω—Ç {client_name} (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)",
                        "messages": msg_count,
                        "file": str(item)
                    })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {item}: {e}")
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    for item in messages_dir.iterdir():
        if item.name.startswith("user_") and item.is_dir():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ messages.json
            msg_file = item.joinpath("messages.json")
            if msg_file.exists():
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
                try:
                    with open(msg_file, 'r', encoding='utf-8') as f:
                        messages = json.load(f)
                        msg_count = len(messages)
                        available_chats.append({
                            "path": str(item),
                            "name": item.name,
                            "messages": msg_count
                        })
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {msg_file}: {e}")
        elif item.name.startswith("telegram_messages_") and item.suffix == ".json":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–∞–ø—Ä—è–º—É—é
            try:
                with open(item, 'r', encoding='utf-8') as f:
                    messages = json.load(f)
                    msg_count = len(messages)
                    available_chats.append({
                        "path": str(item),
                        "name": item.name,
                        "messages": msg_count
                    })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {item}: {e}")
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∏ –≤—ã—Ö–æ–¥–∏–º
    if args.list:
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        counter = 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        available_chats.sort(key=lambda x: x["messages"], reverse=True)
        
        for chat in available_chats:
            print(f"{counter}. {chat['name']} - {chat['messages']} —Å–æ–æ–±—â–µ–Ω–∏–π")
            counter += 1
        
        return
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    if args.all:
        print(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —Å {args.min_messages} –¥–æ {args.max_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {analyzer.output_dir}")
        print("\n–ê–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        filtered_chats = [chat for chat in available_chats 
                         if args.min_messages <= chat["messages"] <= args.max_messages]
        
        if not filtered_chats:
            print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤ —Å {args.min_messages}-{args.max_messages} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.")
            return
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_chats)} —á–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        for i, chat in enumerate(filtered_chats, 1):
            print(f"{i}. {chat['name']} - {chat['messages']} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
        print("\n--- –≠–¢–ê–ü 1: –°–±–æ—Ä —Ç–µ–º –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ ---")
        all_topics = []
        all_topics_data = []
        
        for chat in filtered_chats:
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                chat_path = chat["path"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                if "file" in chat:
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ñ–∞–π–ª
                    messages_file = chat["file"]
                    try:
                        with open(messages_file, 'r', encoding='utf-8') as f:
                            messages = json.load(f)
                            print(f"\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {chat['name']} (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {messages_file}: {e}")
                        continue
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                    messages_file = os.path.join(chat_path, "messages.json")
                    if os.path.exists(messages_file):
                        try:
                            with open(messages_file, 'r', encoding='utf-8') as f:
                                messages = json.load(f)
                                print(f"\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {chat['name']}")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {messages_file}: {e}")
                            continue
                    else:
                        print(f"–§–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {messages_file}")
                        continue
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                prepared_messages = analyzer.prepare_messages_for_analysis(messages, sample_size=args.limit)
                if not prepared_messages:
                    print(f"–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ {chat['name']}")
                    continue
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã —Å checkpoint –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                checkpoint_name = f"{client_name}_topics_checkpoint"
                topics_result = await analyzer.analyze_topics(prepared_messages, checkpoint_base=checkpoint_name)
                if not topics_result or not topics_result.get('topics'):
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã –≤ {chat['name']}")
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º
                topics_file = analyzer.save_results_to_json(topics_result, f"{chat['name']}_topics_analysis")
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º –¥–ª—è {chat['name']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {topics_file}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                chat_topics = topics_result.get('topics', [])
                for topic in chat_topics:
                    topic['source_chat'] = chat['name']
                    all_topics.append(topic)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                all_topics_data.append({
                    "chat_name": chat["name"],
                    "message_count": chat["messages"],
                    "topics": chat_topics
                })
                
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(chat_topics)} —Ç–µ–º –≤ —á–∞—Ç–µ {chat['name']}")
                
            except Exception as e:
                import traceback
                print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Ç–∞ {chat['name']}: {str(e)}")
                print(traceback.format_exc())
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
        if all_topics:
            all_topics_result = {"topics": all_topics}
            all_topics_file = os.path.join(analyzer.output_dir, "all_chats_topics.json")
            with open(all_topics_file, 'w', encoding='utf-8') as f:
                json.dump(all_topics_result, f, ensure_ascii=False, indent=2)
            print(f"\n–í—Å–µ —Ç–µ–º—ã ({len(all_topics)}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {all_topics_file}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º
            all_topics_data_file = os.path.join(analyzer.output_dir, "all_chats_analysis.json")
            with open(all_topics_data_file, 'w', encoding='utf-8') as f:
                json.dump(all_topics_data, f, ensure_ascii=False, indent=2)
            print(f"–î–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {all_topics_data_file}")
            
            # –≠–¢–ê–ü 2: –û—Ü–µ–Ω–∫–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç–µ–º
            print("\n--- –≠–¢–ê–ü 2: –û—Ü–µ–Ω–∫–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç–µ–º ---")
            commercial_assessment = await analyzer.assess_commercial_potential(all_topics_result)
            if commercial_assessment and commercial_assessment.get('commercial_assessment'):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
                assessment_file = analyzer.save_results_to_json(commercial_assessment, "all_chats_commercial_assessment")
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {assessment_file}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report = analyzer.generate_report(all_topics_result, commercial_assessment)
                if report:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
                    report_path = os.path.join(analyzer.output_dir, "all_chats_report.md")
                    with open(report_path, 'w', encoding='utf-8') as f:
                        f.write(report)
                    print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
                    
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ
                executive_summary = analyzer.generate_executive_summary(all_topics_result, commercial_assessment, all_topics_data)
                if executive_summary:
                    summary_path = os.path.join(analyzer.output_dir, "EXECUTIVE_SUMMARY.md")
                    with open(summary_path, 'w', encoding='utf-8') as f:
                        f.write(executive_summary)
                    print(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {summary_path}")
                
                # üéâ –ì–ï–ù–ï–†–ò–†–£–ï–ú –ì–û–¢–û–í–´–ô –û–¢–ß–ï–¢ –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê (–≤—Å–µ —á–∞—Ç—ã)
                print("–°–æ–∑–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º...")
                client_report = analyzer.generate_comprehensive_client_report(all_topics_result, commercial_assessment, "–í–°–ï_–ß–ê–¢–´")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                client_report_path = os.path.join(analyzer.output_dir, "–í–°–ï_–ß–ê–¢–´_–ì–û–¢–û–í–´–ô_–û–¢–ß–ï–¢_–î–õ–Ø_–ö–õ–ò–ï–ù–¢–ê.md")
                with open(client_report_path, 'w', encoding='utf-8') as f:
                    f.write(client_report)
                print(f"üéâ –ì–û–¢–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú –ß–ê–¢–ê–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {client_report_path}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º
            summary = analyzer.create_simple_summary(all_topics_result)
            if summary:
                print("\n" + summary)
            
            print(f"\n–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(all_topics_data)} –∏–∑ {len(filtered_chats)} —á–∞—Ç–æ–≤")
            print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º: {len(all_topics)}")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É —Ç–µ–º—É.")
        
        return
    
    # –ï—Å–ª–∏ –ø—É—Ç—å –∫ —á–∞—Ç—É –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_path = args.chat_path
    if not chat_path:
        print("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–∞—Ç–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.")
        print("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --list")
        print("–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --all")
        return
    
    # –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {analyzer.output_dir}")
    await analyze_chat(analyzer, chat_path, limit=args.limit)

if __name__ == "__main__":
    asyncio.run(main())
