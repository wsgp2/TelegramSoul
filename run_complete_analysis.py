#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import asyncio
import argparse
from dotenv import load_dotenv
from pathlib import Path
from chatgpt_analyzer import ChatGPTAnalyzer

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

async def run_complete_soul_analysis(analyzer, chat_paths, user_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", limit=1000):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π Soul Analysis:
    –≠–¢–ê–ü 1: –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ (10-15 —Ç–µ–º)
    –≠–¢–ê–ü 2: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç–µ–º
    """
    
    print(f"\nüåü –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û SOUL ANALYSIS –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_name}")
    print("=" * 70)
    
    all_topics = []
    successful_chats = []
    
    # üöÄ –≠–¢–ê–ü 1: –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
    print("üöÄ –≠–¢–ê–ü 1: –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó –¢–ï–ú –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ß–ê–¢–ê")
    print("-" * 50)
    
    for i, chat_path in enumerate(chat_paths, 1):
        chat_name = os.path.basename(chat_path.rstrip('/'))
        print(f"\nüìÅ [{i}/{len(chat_paths)}] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç: {chat_name}")
        
        try:
            # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
            chat_result = await analyzer.run_fast_topic_analysis(
                chat_name=chat_name,
                messages_limit=limit,
                save_results=True
            )
            
            if chat_result and chat_result.get('topics'):
                topics_count = len(chat_result['topics'])
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {topics_count} —Ç–µ–º")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∫ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
                for topic in chat_result['topics']:
                    topic['source_chat'] = chat_name
                
                all_topics.extend(chat_result['topics'])
                successful_chats.append(chat_name)
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç {chat_name}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Ç–∞ {chat_name}: {e}")
    
    if not all_topics:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞!")
        return None
    
    print(f"\nüéØ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üìä –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–∞—Ç–æ–≤: {len(successful_chats)}")
    print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–º: {len(all_topics)}")
    print(f"üìù –ß–∞—Ç—ã: {', '.join(successful_chats)}")
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–º—ã
    print("\nüîÑ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º...")
    aggregated_topics = analyzer._aggregate_similar_topics(all_topics)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    total_percentage = sum(topic.get('percentage', 0) for topic in aggregated_topics)
    if total_percentage > 100:
        normalization_factor = 100 / total_percentage
        for topic in aggregated_topics:
            topic['percentage'] = topic.get('percentage', 0) * normalization_factor
    
    aggregated_data = {"topics": aggregated_topics}
    
    print(f"üìä –ü–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(aggregated_topics)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º")
    
    # üéØ –≠–¢–ê–ü 2: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
    print("\n" + "=" * 70)
    print("üéØ –≠–¢–ê–ü 2: –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –ú–û–ù–ï–¢–ò–ó–ê–¶–ò–ò –ò –ü–°–ò–•–û–õ–û–ì–ò–ò")
    print("-" * 50)
    
    try:
        complete_result = await analyzer.run_complete_soul_analysis(
            all_topics_data=aggregated_data,
            user_name=user_name,
            save_results=True
        )
        
        if complete_result:
            print("\nüöÄ –ü–û–õ–ù–´–ô SOUL ANALYSIS –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            topics_count = len(complete_result.get('topics', []))
            monetization_count = len(complete_result.get('monetization_analysis', []))
            psychological_data = complete_result.get('psychological_analysis', {})
            patterns_count = len(psychological_data.get('behavior_patterns', []))
            
            print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   üéØ –¢–µ–º: {topics_count}")
            print(f"   üí∞ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏: {monetization_count}")
            print(f"   üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {patterns_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Ç–µ–º—ã —Å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º
            monetization_analysis = complete_result.get('monetization_analysis', [])
            high_potential = [m for m in monetization_analysis if m.get('commercial_score') == 'high']
            
            if high_potential:
                print(f"\nüî• –¢–û–ü –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –î–õ–Ø –ó–ê–†–ê–ë–û–¢–ö–ê:")
                for analysis in high_potential[:3]:
                    topic = analysis.get('topic', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞')
                    revenue = analysis.get('realistic_revenue', '–Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ')
                    print(f"   üíµ {topic}: {revenue}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            transformation_key = psychological_data.get('transformation_key', '')
            if transformation_key:
                print(f"\n‚ú® –ö–õ–Æ–ß –ö –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò:")
                print(f"   {transformation_key}")
            
            if complete_result.get('report_path'):
                print(f"\nüìÑ –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –°–û–•–†–ê–ù–ï–ù: {complete_result['report_path']}")
            
            return complete_result
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª—É–±–æ–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return None

async def main():
    parser = argparse.ArgumentParser(description="–ü–æ–ª–Ω—ã–π –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π Soul Analysis –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    parser.add_argument(
        "chat_paths",
        nargs="+",
        help="–ü—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º —Å —á–∞—Ç–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    parser.add_argument(
        "--user-name",
        default="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"
    )
    parser.add_argument(
        "--limit",
        type=int,
        default=1000,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000)"
    )
    
    args = parser.parse_args()
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
    api_keys = []
    for i in range(1, 6):
        key = os.getenv(f'OPENAI_API_KEY{i}')
        if key:
            api_keys.append(key)
    
    if not api_keys:
        main_key = os.getenv('OPENAI_API_KEY')
        if main_key:
            api_keys = [main_key]
        else:
            raise ValueError("API –∫–ª—é—á–∏ OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ OPENAI_API_KEY –∏–ª–∏ OPENAI_API_KEY1-5 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(api_keys)} API –∫–ª—é—á–µ–π –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ChatGPTAnalyzer(api_keys=api_keys)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π –∫ —á–∞—Ç–∞–º
    valid_chat_paths = []
    for chat_path in args.chat_paths:
        if os.path.exists(chat_path):
            valid_chat_paths.append(chat_path)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {os.path.basename(chat_path.rstrip('/'))}")
        else:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å: {chat_path}")
    
    if not valid_chat_paths:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —á–∞—Ç–∞–º!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    result = await run_complete_soul_analysis(
        analyzer=analyzer,
        chat_paths=valid_chat_paths,
        user_name=args.user_name,
        limit=args.limit
    )
    
    if result:
        print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    else:
        print("\nüòû –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–ê–ú–ò")

if __name__ == "__main__":
    asyncio.run(main()) 