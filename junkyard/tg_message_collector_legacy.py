#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram —á–µ—Ä–µ–∑ API.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É Telethon –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram.
–°–æ–±–ª—é–¥–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ FloodWait.
"""

import os
import sys
import json
import time
import asyncio
import logging
import random
import pickle
from datetime import datetime
from dotenv import load_dotenv
from telethon import TelegramClient, events, types
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty, InputPeerUser, InputPeerChannel, InputPeerChat, PeerUser, PeerChat, PeerChannel, User
from telethon.errors import FloodWaitError
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("tg_collector.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = int(os.getenv('API_ID'))
API_HASH = os.getenv('API_HASH')
PHONE = os.getenv('PHONE')
OUTPUT_DIR = os.getenv('OUTPUT_DIR', 'data/messages')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([API_ID, API_HASH, PHONE]):
    logger.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (API_ID, API_HASH, PHONE)")
    sys.exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(OUTPUT_DIR, exist_ok=True)
logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {os.path.abspath(OUTPUT_DIR)}")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API (–ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
# https://core.telegram.org/bots/faq
MAX_MESSAGES_PER_SECOND_PER_CHAT = 1  # 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥—É –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ
MAX_MESSAGES_PER_MINUTE_PER_GROUP = 20  # 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É –≤ –≥—Ä—É–ø–ø—É
MAX_BULK_MESSAGES_PER_SECOND = 30  # ~30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏ –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
SAFE_LIMIT_FACTOR = 0.7  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 70% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

class TelegramMessageCollector:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ Telegram."""
    
    def __init__(self, api_id, api_hash, phone, data_dir='data/messages'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Args:
            api_id (int): Telegram API ID
            api_hash (str): Telegram API Hash
            phone (str): –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            data_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        client_folder = phone.replace('+', '').replace('-', '').replace(' ', '')
        self.data_dir = os.path.join(data_dir, f"client_{client_folder}")
        self.checkpoint_file = "telegram_collector_checkpoint.pkl"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        Path(data_dir).mkdir(parents=True, exist_ok=True)
        
        self.client = TelegramClient('session_message_collector', api_id, api_hash)
        self.me = None
        self.messages_data = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.stats = {
            "chats_processed": 0,
            "messages_collected": 0,
            "conversation_pairs_collected": 0,  # –ù–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–∞—Ä "–∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"
            "flood_wait_errors": 0,
            "total_wait_time": 0,
            "api_calls": 0,
            "start_time": None,
            "end_time": None,
            "empty_chats": 0,
            "skipped_chats": 0,
            "bot_chats": 0
        }
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telegram –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è."""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")
        self.stats["start_time"] = datetime.now()
        
        try:
            await self.client.start(phone=self.phone)
            self.me = await self.client.get_me()
            logger.info(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫: {self.me.first_name} (@{self.me.username})")
            logger.info(f"üÜî User ID: {self.me.id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    async def api_call(self, coroutine, description="API –≤—ã–∑–æ–≤"):
        """
        –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –ø–∞—É–∑.
        
        Args:
            coroutine: –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ API
            description: –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –¥–ª—è –ª–æ–≥–æ–≤
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ API
        """
        for attempt in range(1, 6):  # –ú–∞–∫—Å–∏–º—É–º 5 –ø–æ–ø—ã—Ç–æ–∫
            try:
                self.stats["api_calls"] += 1
                
                logger.debug(f"üì° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ API –≤—ã–∑–æ–≤–∞: {description}")
                return await coroutine
            except FloodWaitError as e:
                self.stats["flood_wait_errors"] += 1
                self.stats["total_wait_time"] += e.seconds
                
                logger.warning(f"‚ö†Ô∏è FloodWaitError: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º ({description})")
                await asyncio.sleep(e.seconds + random.uniform(0.5, 1.5))  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API ({description}): {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(random.uniform(3, 5))
                raise
    
    def save_checkpoint(self, state_dict):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏.
        
        Args:
            state_dict (dict): –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–±–æ—Ä–∞
        """
        try:
            with open(self.checkpoint_file, 'wb') as f:
                pickle.dump(state_dict, f)
            logger.info(f"‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.checkpoint_file}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏: {e}")
    
    def load_checkpoint(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏.
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            if os.path.exists(self.checkpoint_file):
                with open(self.checkpoint_file, 'rb') as f:
                    checkpoint = pickle.load(f)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: {checkpoint.get('stage', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø')}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if 'stats' in checkpoint:
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                    for key in self.stats:
                        if key not in checkpoint['stats']:
                            checkpoint['stats'][key] = 0 if isinstance(self.stats[key], int) else self.stats[key]
                    
                    self.stats = checkpoint['stats']
                
                return checkpoint
            else:
                logger.info("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏: {e}")
            return None
            
    async def collect_personal_chats(self, limit_per_chat=None, max_chats=None, delay_between_chats=5):
        """
        –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API.
        
        Args:
            limit_per_chat (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞.
                                           None –æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
            max_chats (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫.
                                      None –æ–∑–Ω–∞—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.
            delay_between_chats (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–∞—Ç–æ–≤
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        checkpoint = self.load_checkpoint()
        if checkpoint and 'stage' in checkpoint:
            try:
                if checkpoint['stage'] == 'loading_dialogs':
                    logger.info("üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    dialogs = checkpoint.get('dialogs', [])
                    offset_date = checkpoint.get('offset_date')
                    offset_id = checkpoint.get('offset_id', 0)
                    chunks_loaded = checkpoint.get('chunks_loaded', 0)
                    
                    logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏")
                    
                    # –í—ã–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–∏–∞–ª–æ–≥–æ–≤
                    return await self._continue_loading_dialogs(
                        dialogs, offset_date, offset_id, chunks_loaded,
                        limit_per_chat, max_chats, delay_between_chats
                    )
                elif checkpoint['stage'] == 'dialogs_loaded':
                    logger.info("üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏")
                    dialogs = checkpoint['dialogs']
                    logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏")
                elif checkpoint['stage'] in ['personal_chats_filtered', 'processing_chats']:
                    logger.info("üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
                    if 'personal_chats' not in checkpoint or 'processed_chats' not in checkpoint:
                        logger.warning("‚ö†Ô∏è –í –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∑–∞–Ω–æ–≤–æ")
                        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                        os.remove(self.checkpoint_file)
                        return await self.collect_personal_chats(limit_per_chat, max_chats, delay_between_chats)
                    
                    return await self._process_personal_chats(
                        checkpoint['personal_chats'], 
                        checkpoint['processed_chats'],
                        limit_per_chat, 
                        max_chats, 
                        delay_between_chats
                    )
                elif checkpoint['stage'] == 'completed':
                    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–Ω–µ–µ")
                    if 'messages_data' in checkpoint:
                        self.messages_data = checkpoint['messages_data']
                        logger.info(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(self.messages_data)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    return self.messages_data
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏: {checkpoint['stage']}, –Ω–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∑–∞–Ω–æ–≤–æ")
                    return await self._start_collection(limit_per_chat, max_chats, delay_between_chats)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏: {e}")
                logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω–æ–≤–æ")
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏, —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                if os.path.exists(self.checkpoint_file):
                    os.remove(self.checkpoint_file)
                return await self._start_collection(limit_per_chat, max_chats, delay_between_chats)
        else:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
            return await self._start_collection(limit_per_chat, max_chats, delay_between_chats)
    
    async def _start_collection(self, limit_per_chat=None, max_chats=None, delay_between_chats=5):
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç —Å–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω—É–ª—è.
        
        Args:
            limit_per_chat (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞.
            max_chats (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
            delay_between_chats (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–∞—Ç–æ–≤.
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        logger.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ —Å –±–æ–ª—å—à–∏–º–∏ –ø–∞—É–∑–∞–º–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        dialogs = []
        offset_date = None
        offset_id = 0
        offset_peer = InputPeerEmpty()
        
        # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏
        chunks_loaded = 0
        chunk_size = 100  # –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏–∞–ª–æ–≥–æ–≤
        
        logger.info("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:")
        if limit_per_chat is None:
            logger.info("   - –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞")
        else:
            logger.info(f"   - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ {limit_per_chat} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞")
            
        if max_chats is None:
            logger.info("   - –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤")
        else:
            logger.info(f"   - –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ {max_chats} —á–∞—Ç–æ–≤")
            
        logger.info(f"   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏: {delay_between_chats} —Å–µ–∫—É–Ω–¥")
    
        while True:
            try:
                logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ #{chunks_loaded+1} (—Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏: {chunk_size})...")
                
                result = await self.api_call(
                    self.client(GetDialogsRequest(
                        offset_date=offset_date,
                        offset_id=offset_id,
                        offset_peer=offset_peer,
                        limit=chunk_size,
                        hash=0
                    )),
                    f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ #{chunks_loaded+1}"
                )
                
                if not result.dialogs:
                    break
                    
                dialogs.extend(result.dialogs)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(result.dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ—Ä—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
                checkpoint_data = {
                    'stage': 'loading_dialogs',
                    'dialogs': dialogs,
                    'offset_date': offset_date,
                    'offset_id': offset_id,
                    'chunks_loaded': chunks_loaded
                }
                self.save_checkpoint(checkpoint_data)
                
                if len(result.dialogs) < chunk_size:
                    break
                    
                offset_date = result.messages[-1].date
                offset_peer = result.dialogs[-1].peer
                offset_id = result.messages[-1].id
                
                chunks_loaded += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–∞—É–∑–∞)
                pause_time = random.uniform(4.0, 6.0)
                logger.info(f"‚è±Ô∏è –ü–∞—É–∑–∞ {pause_time:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤...")
                await asyncio.sleep(pause_time)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
                # –ë–æ–ª—å—à–µ –∂–¥–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(15)
    
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤ –≤—Å–µ–≥–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–µ
        checkpoint_data = {
            'stage': 'dialogs_loaded',
            'dialogs': dialogs
        }
        self.save_checkpoint(checkpoint_data)
        
        # –£–≤–µ–ª–∏—á–∏–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.getLogger().setLevel(logging.DEBUG)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        personal_chats = []
        logger.info("üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤...")
        user_count = 0
        
        for i, dialog in enumerate(dialogs):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º peer —á–∞—Ç–∞
                if hasattr(dialog, 'peer'):
                    peer = dialog.peer
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ peer –ª–∏—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    if isinstance(peer, PeerUser):
                        user_count += 1
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_id = getattr(peer, 'user_id', 'Unknown')
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–∏–∞–ª–æ–≥–∞
                        dialog_id = f"ID:{user_id}"
                        try:
                            if hasattr(dialog, 'title') and dialog.title:
                                dialog_id = f"{dialog.title} (ID:{user_id})"
                        except:
                            pass
                            
                        if i < 20:  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 20 –¥–∏–∞–ª–æ–≥–æ–≤
                            logger.debug(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –ª–∏—á–Ω—ã–π —á–∞—Ç #{user_count}: {dialog_id}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        personal_chats.append({
                            'dialog': dialog,
                            'user_id': user_id,
                            'dialog_id': dialog_id
                        })
                    else:
                        chat_type = "–ì—Ä—É–ø–ø–∞" if isinstance(peer, PeerChat) else "–ö–∞–Ω–∞–ª" if isinstance(peer, PeerChannel) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
                        
                        if i < 20:  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 20 –¥–∏–∞–ª–æ–≥–æ–≤
                            logger.debug(f"   ‚è© –ü—Ä–æ–ø—É—Å–∫ {chat_type}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∏–∞–ª–æ–≥–∞ #{i}: {e}")
        
        logger.info(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(personal_chats)} –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–µ
        checkpoint_data = {
            'stage': 'personal_chats_filtered',
            'personal_chats': personal_chats,
            'processed_chats': []
        }
        self.save_checkpoint(checkpoint_data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
        return await self._process_personal_chats(personal_chats, [], limit_per_chat, max_chats, delay_between_chats)
    
    async def _continue_loading_dialogs(self, dialogs, offset_date, offset_id, chunks_loaded, limit_per_chat, max_chats, delay_between_chats):
        """
        –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
        
        Args:
            dialogs (list): –°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            offset_date (datetime): –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–∏–∞–ª–æ–≥–µ
            offset_id (int): ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–∏–∞–ª–æ–≥–µ
            chunks_loaded (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ü–∏–π –¥–∏–∞–ª–æ–≥–æ–≤
            limit_per_chat (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞.
            max_chats (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
            delay_between_chats (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–∞—Ç–æ–≤.
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        logger.info("üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤...")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∏–∞–ª–æ–≥–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        while True:
            try:
                logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ #{chunks_loaded+1}...")
                
                result = await self.api_call(
                    self.client(GetDialogsRequest(
                        offset_date=offset_date,
                        offset_id=offset_id,
                        offset_peer=InputPeerEmpty(),
                        limit=100,
                        hash=0
                    )),
                    f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ #{chunks_loaded+1}"
                )
                
                if not result.dialogs:
                    break
                    
                dialogs.extend(result.dialogs)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(result.dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ—Ä—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
                checkpoint_data = {
                    'stage': 'loading_dialogs',
                    'dialogs': dialogs,
                    'offset_date': offset_date,
                    'offset_id': offset_id,
                    'chunks_loaded': chunks_loaded
                }
                self.save_checkpoint(checkpoint_data)
                
                if len(result.dialogs) < 100:
                    break
                    
                offset_date = result.messages[-1].date
                offset_id = result.messages[-1].id
                
                chunks_loaded += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–∞—É–∑–∞)
                pause_time = random.uniform(4.0, 6.0)
                logger.info(f"‚è±Ô∏è –ü–∞—É–∑–∞ {pause_time:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤...")
                await asyncio.sleep(pause_time)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
                # –ë–æ–ª—å—à–µ –∂–¥–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(15)
    
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤ –≤—Å–µ–≥–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–µ
        checkpoint_data = {
            'stage': 'dialogs_loaded',
            'dialogs': dialogs
        }
        self.save_checkpoint(checkpoint_data)
        
        # –£–≤–µ–ª–∏—á–∏–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.getLogger().setLevel(logging.DEBUG)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        personal_chats = []
        logger.info("üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤...")
        user_count = 0
        
        for i, dialog in enumerate(dialogs):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º peer —á–∞—Ç–∞
                if hasattr(dialog, 'peer'):
                    peer = dialog.peer
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ peer –ª–∏—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    if isinstance(peer, PeerUser):
                        user_count += 1
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_id = getattr(peer, 'user_id', 'Unknown')
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–∏–∞–ª–æ–≥–∞
                        dialog_id = f"ID:{user_id}"
                        try:
                            if hasattr(dialog, 'title') and dialog.title:
                                dialog_id = f"{dialog.title} (ID:{user_id})"
                        except:
                            pass
                            
                        if i < 20:  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 20 –¥–∏–∞–ª–æ–≥–æ–≤
                            logger.debug(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –ª–∏—á–Ω—ã–π —á–∞—Ç #{user_count}: {dialog_id}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        personal_chats.append({
                            'dialog': dialog,
                            'user_id': user_id,
                            'dialog_id': dialog_id
                        })
                    else:
                        chat_type = "–ì—Ä—É–ø–ø–∞" if isinstance(peer, PeerChat) else "–ö–∞–Ω–∞–ª" if isinstance(peer, PeerChannel) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
                        
                        if i < 20:  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 20 –¥–∏–∞–ª–æ–≥–æ–≤
                            logger.debug(f"   ‚è© –ü—Ä–æ–ø—É—Å–∫ {chat_type}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∏–∞–ª–æ–≥–∞ #{i}: {e}")
        
        logger.info(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(personal_chats)} –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–µ
        checkpoint_data = {
            'stage': 'personal_chats_filtered',
            'personal_chats': personal_chats,
            'processed_chats': []
        }
        self.save_checkpoint(checkpoint_data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
        return await self._process_personal_chats(personal_chats, [], limit_per_chat, max_chats, delay_between_chats)
    
    async def _get_messages_from_dialog(self, dialog, limit=None):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API.
        
        Args:
            dialog: –û–±—ä–µ–∫—Ç –¥–∏–∞–ª–æ–≥–∞
            limit (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        messages = []
        offset_id = 0
        loaded_count = 0
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º peer –¥–∏–∞–ª–æ–≥–∞
            entity = await self.client.get_entity(dialog.peer)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ - –Ω–µ –±–æ–ª–µ–µ 3000 —Å–æ–æ–±—â–µ–Ω–∏–π
            if isinstance(entity, types.User):
                if limit is None or limit > 3000:
                    safe_limit = 3000
                    logger.info(f"‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 3000 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞")
                else:
                    safe_limit = limit
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                user_info = []
                if hasattr(entity, 'first_name') and entity.first_name:
                    user_info.append(entity.first_name)
                if hasattr(entity, 'last_name') and entity.last_name:
                    user_info.append(entity.last_name)
                    
                user_name = " ".join(user_info) if user_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                user_id = entity.id
                username = f"@{entity.username}" if hasattr(entity, 'username') and entity.username else "–±–µ–∑ username"
                
                logger.info(f"üë§ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ —Å: {user_name} ({username}, ID:{user_id})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–æ–º
                if hasattr(entity, 'bot') and entity.bot:
                    logger.warning(f"ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–æ—Ç {user_name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–æ—Ç–æ–≤ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                    if hasattr(self, 'stats'):
                        self.stats['bot_chats'] += 1
                    return []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ —á—Ç–æ —ç—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª
                if hasattr(entity, 'megagroup') and entity.megagroup:
                    logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–µ–≥–∞–≥—Ä—É–ø–ø–∞ –≤–º–µ—Å—Ç–æ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ —Å {user_name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    return []
                if hasattr(entity, 'broadcast') and entity.broadcast:
                    logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∞–Ω–∞–ª –≤–º–µ—Å—Ç–æ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ —Å {user_name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    return []
            else:
                logger.warning(f"‚ö†Ô∏è –î–∏–∞–ª–æ–≥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏—á–Ω—ã–º —á–∞—Ç–æ–º (—Ç–∏–ø: {type(entity).__name__}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                return []
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
            if not self.client.is_connected():
                logger.warning("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π. –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                await self.reconnect()
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            while True:
                try:
                    history = await self.api_call(
                        self.client.get_messages(entity, limit=100, offset_id=offset_id),
                        f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (offset_id={offset_id})"
                    )
                    
                    if not history:
                        break
                        
                    messages.extend(history)
                    loaded_count += len(history)
                    offset_id = history[-1].id
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 500 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if loaded_count % 500 == 0:
                        logger.info(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ —Å {user_name}...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
                    if safe_limit and loaded_count >= safe_limit:
                        logger.info(f"   ‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {safe_limit} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞")
                        break
                        
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(random.uniform(0.3, 0.7))
                    
                except FloodWaitError as e:
                    logger.warning(f"‚ö†Ô∏è FloodWaitError: –û–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(e.seconds + random.uniform(1, 3))
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await asyncio.sleep(random.uniform(3, 5))
                    break
                    
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ —Å {user_name}")
            return messages
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    def _process_messages_to_conversation_pairs(self, messages):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–∑–¥–∞–≤–∞—è –ø–∞—Ä—ã "–∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç" –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
        
        Args:
            messages (list): –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            tuple: (—Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–ø–∏—Å–æ–∫ –ø–∞—Ä "–∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç")
        """
        messages_json = []
        conversation_pairs = []
        owner_id = self.me.id
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        sorted_messages = sorted(messages, key=lambda x: x.date)
        
        previous_message = None
        
        for msg in sorted_messages:
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_data = {
                    'id': msg.id,
                    'date': msg.date.isoformat(),
                    'message': msg.message,
                    'out': msg.out,
                    'mentioned': msg.mentioned,
                    'media_unread': msg.media_unread,
                    'silent': msg.silent if hasattr(msg, 'silent') else None,
                    'post': msg.post if hasattr(msg, 'post') else None,
                    'from_scheduled': msg.from_scheduled if hasattr(msg, 'from_scheduled') else None,
                    'legacy': msg.legacy if hasattr(msg, 'legacy') else None,
                    'edit_hide': msg.edit_hide if hasattr(msg, 'edit_hide') else None,
                    'pinned': msg.pinned if hasattr(msg, 'pinned') else None,
                    'noforwards': msg.noforwards if hasattr(msg, 'noforwards') else None,
                    'from_id': msg.from_id.user_id if hasattr(msg, 'from_id') and hasattr(msg.from_id, 'user_id') else None
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                messages_json.append(message_data)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã "–∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if previous_message and msg.message and previous_message.message:
                    current_from_owner = msg.out
                    previous_not_from_owner = not previous_message.out
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if current_from_owner and previous_not_from_owner:
                        pair = {
                            'query': previous_message.message,
                            'response': msg.message,
                            'query_id': previous_message.id,
                            'response_id': msg.id,
                            'query_date': previous_message.date.isoformat(),
                            'response_date': msg.date.isoformat()
                        }
                        conversation_pairs.append(pair)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                previous_message = msg
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {e}")
                
        return messages_json, conversation_pairs
    
    async def _process_personal_chats(self, personal_chats, processed_chats=None, limit_per_chat=None, max_chats=None, delay_between_chats=5):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ —Å–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Args:
            personal_chats (list): –°–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
            processed_chats (list, optional): –°–ø–∏—Å–æ–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
            limit_per_chat (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
            max_chats (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            delay_between_chats (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–∞—Ç–æ–≤
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        if processed_chats is None:
            processed_chats = []
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        safe_limit_per_chat = limit_per_chat  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
        total_chats = len(personal_chats)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ
        max_to_process = min(total_chats, max_chats) if max_chats else total_chats
        personal_chats_to_process = personal_chats[:max_to_process]
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {max_to_process} –∏–∑ {total_chats} –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Ç—ã, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if len(processed_chats) > 0:
            logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {len(processed_chats)} —Ä–∞–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        chats_remaining = max_to_process - len(processed_chats)
        
        if chats_remaining <= 0:
            logger.info("‚úÖ –í—Å–µ —á–∞—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            checkpoint_data = {
                'stage': 'completed',
                'messages_data': self.messages_data
            }
            self.save_checkpoint(checkpoint_data)
            return self.messages_data
        
        logger.info(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {chats_remaining} —á–∞—Ç–æ–≤")
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç
        for i, chat in enumerate(personal_chats_to_process):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
            if i < len(processed_chats):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
            if not self.client.is_connected():
                logger.warning("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–∞—Ç–∞. –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                await self.reconnect()
            
            processed_count = len(processed_chats)
            total_progress = f"{processed_count + 1}/{total_chats}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            if isinstance(chat, dict):
                dialog = chat['dialog']
                user_id = chat['user_id']
                dialog_id = chat['dialog_id']
                logger.info(f"üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞ {total_progress}: ID:{dialog_id}")
            else:
                dialog = chat
                user_id = chat.id
                dialog_id = chat.id
                logger.info(f"üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞ {total_progress}: ID:{chat.id}")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_dir = os.path.join(self.data_dir, f"user_{user_id}")
                os.makedirs(user_dir, exist_ok=True)
                
                # –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–∞—Ä "–∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"
                messages_file = os.path.join(user_dir, 'messages.json')
                conversations_file = os.path.join(user_dir, 'conversations.json')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if os.path.exists(messages_file) and os.path.exists(conversations_file):
                    logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —á–∞—Ç–∞ ID:{dialog_id}")
                    
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
                        with open(messages_file, 'r', encoding='utf-8') as f:
                            existing_messages = json.load(f)
                        with open(conversations_file, 'r', encoding='utf-8') as f:
                            existing_conversations = json.load(f)
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–µ –ø—É—Å—Ç—ã–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                        if existing_messages and isinstance(existing_messages, list) and len(existing_messages) > 0:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
                            first_msg = existing_messages[0]
                            if 'id' in first_msg and 'date' in first_msg and 'message' in first_msg:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(existing_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏ {len(existing_conversations)} –ø–∞—Ä –∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç")
                                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                                if hasattr(self, 'stats'):
                                    self.stats['messages_collected'] += len(existing_messages)
                                    self.stats['conversation_pairs_collected'] += len(existing_conversations)
                                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
                                processed_chats.append(chat)
                                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∞—Ç—É
                                continue
                            else:
                                logger.warning(f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                messages = await self._get_messages_from_dialog(dialog, safe_limit_per_chat)
                
                if messages:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã "–∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"
                    messages_json, conversation_pairs = self._process_messages_to_conversation_pairs(messages)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
                    with open(messages_file, 'w', encoding='utf-8') as f:
                        json.dump(messages_json, f, ensure_ascii=False, indent=2)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—ã "–∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç" –≤ —Ñ–∞–π–ª
                    with open(conversations_file, 'w', encoding='utf-8') as f:
                        json.dump(conversation_pairs, f, ensure_ascii=False, indent=2)
                        
                    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages_json)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏ {len(conversation_pairs)} –ø–∞—Ä –∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ {dialog_id}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    if hasattr(self, 'stats'):
                        self.stats['messages_collected'] += len(messages_json)
                        self.stats['conversation_pairs_collected'] += len(conversation_pairs)
                else:
                    logger.info(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —á–∞—Ç–µ —Å ID:{dialog_id}")
                    if hasattr(self, 'stats'):
                        if 'empty_chats' in self.stats:
                            self.stats['empty_chats'] += 1
                        else:
                            # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                            self.stats['empty_chats'] = 1
            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {dialog_id}: {e}")
                if hasattr(self, 'stats'):
                    if hasattr(self.stats, 'skipped_chats'):
                        self.stats['skipped_chats'] += 1
                    else:
                        # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                        self.stats['skipped_chats'] = 1
                
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
            processed_chats.append(chat)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
            checkpoint_data = {
                'stage': 'processing_chats',
                'personal_chats': personal_chats,
                'processed_chats': processed_chats,
                'messages_data': self.messages_data
            }
            self.save_checkpoint(checkpoint_data)
            
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
            pause_time = random.uniform(delay_between_chats, delay_between_chats + 2)
            logger.info(f"‚è±Ô∏è –ü–∞—É–∑–∞ {pause_time:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞...")
            await asyncio.sleep(pause_time)
            
        logger.info(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–±—Ä–∞–Ω–æ {self.stats['messages_collected']} —Å–æ–æ–±—â–µ–Ω–∏–π –∏ {self.stats['conversation_pairs_collected']} –ø–∞—Ä –∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –∏–∑ {len(processed_chats)} —á–∞—Ç–æ–≤")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ - –≤—Å–µ —á–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        checkpoint_data = {
            'stage': 'completed',
            'personal_chats': personal_chats,
            'processed_chats': processed_chats,
            'messages_data': self.messages_data,
            'stats': self.stats
        }
        self.save_checkpoint(checkpoint_data)
        
        return self.messages_data
    
    async def save_messages_to_json(self, filename=None):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ JSON —Ñ–∞–π–ª.
        
        Args:
            filename (str, optional): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"telegram_messages_{timestamp}.json"
        
        file_path = os.path.join(OUTPUT_DIR, filename)
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(self.messages_data)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª...")
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(self.messages_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}")
        return file_path
    
    async def disconnect(self):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤.
        """
        if hasattr(self, 'client') and self.client is not None:
            try:
                await self.client.disconnect()
                logger.debug("‚úÖ –ö–ª–∏–µ–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    async def close(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞."""
        await self.disconnect()
        logger.info("üëã –ö–ª–∏–µ–Ω—Ç Telegram –æ—Ç–∫–ª—é—á–µ–Ω")
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats["end_time"] = datetime.now()
        elapsed_time = (self.stats["end_time"] - self.stats["start_time"]).total_seconds()
        
        logger.info("\n" + "="*50)
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üí¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {self.stats['chats_processed']}")
        logger.info(f"üìù –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages_collected']}")
        logger.info(f"üîÑ –°–æ–±—Ä–∞–Ω–æ –ø–∞—Ä –∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç: {self.stats['conversation_pairs_collected']}")
        logger.info(f"‚ö†Ô∏è –°–ª—É—á–∞–µ–≤ FloodWaitError: {self.stats['flood_wait_errors']}")
        logger.info(f"‚è≥ –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑-–∑–∞ FloodWaitError: {self.stats['total_wait_time']} —Å–µ–∫—É–Ω–¥")
        if self.stats["messages_collected"] > 0:
            logger.info(f"‚ö°Ô∏è –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {self.stats['messages_collected'] / elapsed_time:.2f} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫")
        logger.info("="*50)

    async def reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram."""
        try:
            await self.client.reconnect()
            logger.info("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    start_time = time.time()
    logger.info("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: /Users/wsgp/TGparser/data/messages")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
    load_dotenv()
    api_id = os.getenv('API_ID')
    api_hash = os.getenv('API_HASH')
    phone = os.getenv('PHONE')
    
    if not api_id or not api_hash or not phone:
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env")
        logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ API_ID, API_HASH –∏ PHONE –∑–∞–¥–∞–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–±–æ—Ä—â–∏–∫–∞
    collector = TelegramMessageCollector(api_id, api_hash, phone)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")
        await collector.start()
        
        # –°–±–æ—Ä –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            messages = await collector.collect_personal_chats(
                limit_per_chat=None,  # –ü–æ–ª—É—á–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                max_chats=None,  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
                delay_between_chats=5  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
            if messages:
                logger.info(f"üéØ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–±—â–∏–π –∞—Ä—Ö–∏–≤...")
                await collector.save_messages_to_json()
                
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–±–æ—Ä—â–∏–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await collector.close()
        logger.info("üëã –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        if hasattr(collector, 'stats') and collector.stats:
            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            for key, value in collector.stats.items():
                logger.info(f"   - {key}: {value}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main
    asyncio.run(main())
